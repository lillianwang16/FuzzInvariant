Daikon version 5.5.14, released October 3, 2017; http://plse.cs.washington.edu/daikon.
Reading declaration files .(read 1 decls file)
Processing trace data; reading 1 dtrace file:

===========================================================================
..alphabetic():::ENTER
::alphstr == ""
::words2 == null
::words2ptrs == null
::wordss == null
::wordsn == null
::wordmasks == null
::ncount == 0
::longestlength == 0
::largestlet == 0
::rec_anag_count == 0
::adjacentdups == 0
::specfirstword == 0
::maxdepthspec == 0
::silent == 0
::max_depth == 32
::vowelcheck == 1
::lindx1 == null
::lindx2 == null
::findx1 has only one value
::findx1[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx1[] elements == 0
::findx2 has only one value
::findx2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx2[] elements == 0
s == "DAIKON DYNAMIC INVARIANT DETECTOR\n"
::findx1[] elements == ::ncount
::ncount in ::findx1[]
::findx2[] elements == ::ncount
::ncount in ::findx2[]
::findx1[] elements == ::longestlength
::longestlength in ::findx1[]
::findx2[] elements == ::longestlength
::longestlength in ::findx2[]
::findx1[] elements == ::largestlet
::largestlet in ::findx1[]
::findx2[] elements == ::largestlet
::largestlet in ::findx2[]
::findx1[] elements == ::rec_anag_count
::rec_anag_count in ::findx1[]
::findx2[] elements == ::rec_anag_count
::rec_anag_count in ::findx2[]
::adjacentdups in ::findx1[]
::findx1[] elements == ::adjacentdups
::adjacentdups in ::findx2[]
::findx2[] elements == ::adjacentdups
::findx1[] elements == ::specfirstword
::specfirstword in ::findx1[]
::findx2[] elements == ::specfirstword
::specfirstword in ::findx2[]
::findx1[] elements == ::maxdepthspec
::maxdepthspec in ::findx1[]
::findx2[] elements == ::maxdepthspec
::maxdepthspec in ::findx2[]
::findx1[] elements == ::silent
::silent in ::findx1[]
::findx2[] elements == ::silent
::silent in ::findx2[]
===========================================================================
..alphabetic():::EXIT
::words2 == orig(::words2)
::words2ptrs == orig(::words2ptrs)
::wordss == orig(::wordss)
::wordsn == orig(::wordsn)
::wordmasks == orig(::wordmasks)
::ncount == orig(::ncount)
::longestlength == orig(::longestlength)
::largestlet == orig(::largestlet)
::rec_anag_count == orig(::rec_anag_count)
::adjacentdups == orig(::adjacentdups)
::specfirstword == orig(::specfirstword)
::maxdepthspec == orig(::maxdepthspec)
::silent == orig(::silent)
::max_depth == orig(::max_depth)
::vowelcheck == orig(::vowelcheck)
::lindx1 == orig(::lindx1)
::lindx2 == orig(::lindx2)
::findx1 == orig(::findx1)
::findx1[] == orig(::findx1[])
::findx2 == orig(::findx2)
::findx2[] == orig(::findx2[])
::alphstr == "DAIKONDYNAMICINVARIANTDETECTOR"
::words2 == null
::words2ptrs == null
::wordss == null
::wordsn == null
::wordmasks == null
::ncount == 0
::longestlength == 0
::largestlet == 0
::rec_anag_count == 0
::adjacentdups == 0
::specfirstword == 0
::maxdepthspec == 0
::silent == 0
::max_depth == 32
::vowelcheck == 1
::lindx1 == null
::lindx2 == null
::findx1 has only one value
::findx1[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx1[] elements == 0
::findx2 has only one value
::findx2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx2[] elements == 0
::alphstr == return
::findx1[] elements == ::ncount
::ncount in ::findx1[]
::findx2[] elements == ::ncount
::ncount in ::findx2[]
::findx1[] elements == ::longestlength
::longestlength in ::findx1[]
::findx2[] elements == ::longestlength
::longestlength in ::findx2[]
::findx1[] elements == ::largestlet
::largestlet in ::findx1[]
::findx2[] elements == ::largestlet
::largestlet in ::findx2[]
::findx1[] elements == ::rec_anag_count
::rec_anag_count in ::findx1[]
::findx2[] elements == ::rec_anag_count
::rec_anag_count in ::findx2[]
::adjacentdups in ::findx1[]
::findx1[] elements == ::adjacentdups
::adjacentdups in ::findx2[]
::findx2[] elements == ::adjacentdups
::findx1[] elements == ::specfirstword
::specfirstword in ::findx1[]
::findx2[] elements == ::specfirstword
::specfirstword in ::findx2[]
::findx1[] elements == ::maxdepthspec
::maxdepthspec in ::findx1[]
::findx2[] elements == ::maxdepthspec
::maxdepthspec in ::findx2[]
::findx1[] elements == ::silent
::silent in ::findx1[]
::findx2[] elements == ::silent
::silent in ::findx2[]
===========================================================================
..main():::ENTER
::words2 == null
::words2ptrs == null
::wordss == null
::wordsn == null
::wordmasks == null
::ncount == 0
::longestlength == 0
::largestlet == 0
::rec_anag_count == 0
::adjacentdups == 0
::specfirstword == 0
::maxdepthspec == 0
::silent == 0
::max_depth == 0
::vowelcheck == 0
::lindx1 == null
::lindx2 == null
::findx1 has only one value
::findx1[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx1[] elements == 0
::findx2 has only one value
::findx2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx2[] elements == 0
argc == 5
argv has only one value
argv[] == [./wordplay]
argv[] elements == "./wordplay"
::findx1[] elements == ::ncount
::ncount in ::findx1[]
::findx2[] elements == ::ncount
::ncount in ::findx2[]
::findx1[] elements == ::longestlength
::longestlength in ::findx1[]
::findx2[] elements == ::longestlength
::longestlength in ::findx2[]
::findx1[] elements == ::largestlet
::largestlet in ::findx1[]
::findx2[] elements == ::largestlet
::largestlet in ::findx2[]
::findx1[] elements == ::rec_anag_count
::rec_anag_count in ::findx1[]
::findx2[] elements == ::rec_anag_count
::rec_anag_count in ::findx2[]
::adjacentdups in ::findx1[]
::findx1[] elements == ::adjacentdups
::adjacentdups in ::findx2[]
::findx2[] elements == ::adjacentdups
::findx1[] elements == ::specfirstword
::specfirstword in ::findx1[]
::findx2[] elements == ::specfirstword
::specfirstword in ::findx2[]
::findx1[] elements == ::maxdepthspec
::maxdepthspec in ::findx1[]
::findx2[] elements == ::maxdepthspec
::maxdepthspec in ::findx2[]
::findx1[] elements == ::silent
::silent in ::findx1[]
::findx2[] elements == ::silent
::silent in ::findx2[]
::findx1[] elements == ::max_depth
::max_depth in ::findx1[]
::findx2[] elements == ::max_depth
::max_depth in ::findx2[]
::findx1[] elements == ::vowelcheck
::vowelcheck in ::findx1[]
::findx2[] elements == ::vowelcheck
::vowelcheck in ::findx2[]
===========================================================================
..main():::EXIT
::words2 == orig(::words2)
::words2ptrs == orig(::words2ptrs)
::wordss == orig(::wordss)
::wordsn == orig(::wordsn)
::wordmasks == orig(::wordmasks)
::ncount == orig(::ncount)
::longestlength == orig(::longestlength)
::largestlet == orig(::largestlet)
::rec_anag_count == orig(::rec_anag_count)
::adjacentdups == orig(::adjacentdups)
::specfirstword == orig(::specfirstword)
::maxdepthspec == orig(::maxdepthspec)
::silent == orig(::silent)
::lindx1 == orig(::lindx1)
::lindx2 == orig(::lindx2)
::findx1 == orig(::findx1)
::findx1[] == orig(::findx1[])
::findx2 == orig(::findx2)
::findx2[] == orig(::findx2[])
::words2 == null
::words2ptrs == null
::wordss == null
::wordsn == null
::wordmasks == null
::ncount == 0
::longestlength == 0
::largestlet == 0
::rec_anag_count == 0
::adjacentdups == 0
::specfirstword == 0
::maxdepthspec == 0
::silent == 0
::max_depth == 32
::vowelcheck == 1
::lindx1 == null
::lindx2 == null
::findx1 has only one value
::findx1[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx1[] elements == 0
::findx2 has only one value
::findx2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx2[] elements == 0
argv[] == [./wordplay]
argv[] elements == "./wordplay"
return == -1
::findx1[] elements == ::ncount
::ncount in ::findx1[]
::findx2[] elements == ::ncount
::ncount in ::findx2[]
::findx1[] elements == ::longestlength
::longestlength in ::findx1[]
::findx2[] elements == ::longestlength
::longestlength in ::findx2[]
::findx1[] elements == ::largestlet
::largestlet in ::findx1[]
::findx2[] elements == ::largestlet
::largestlet in ::findx2[]
::findx1[] elements == ::rec_anag_count
::rec_anag_count in ::findx1[]
::findx2[] elements == ::rec_anag_count
::rec_anag_count in ::findx2[]
::adjacentdups in ::findx1[]
::findx1[] elements == ::adjacentdups
::adjacentdups in ::findx2[]
::findx2[] elements == ::adjacentdups
::findx1[] elements == ::specfirstword
::specfirstword in ::findx1[]
::findx2[] elements == ::specfirstword
::specfirstword in ::findx2[]
::findx1[] elements == ::maxdepthspec
::maxdepthspec in ::findx1[]
::findx2[] elements == ::maxdepthspec
::maxdepthspec in ::findx2[]
::findx1[] elements == ::silent
::silent in ::findx1[]
::findx2[] elements == ::silent
::silent in ::findx2[]
::findx1[] elements == orig(::max_depth)
orig(::max_depth) in ::findx1[]
::findx1[] elements == orig(::vowelcheck)
orig(::vowelcheck) in ::findx1[]
::findx2[] elements == orig(::max_depth)
orig(::max_depth) in ::findx2[]
::findx2[] elements == orig(::vowelcheck)
orig(::vowelcheck) in ::findx2[]
===========================================================================
..uppercase():::ENTER
::upcasestr one of { "", "WORDS.TXT" }
::words2 == null
::words2ptrs == null
::wordss == null
::wordsn == null
::wordmasks == null
::ncount == 0
::longestlength == 0
::largestlet == 0
::rec_anag_count == 0
::adjacentdups == 0
::specfirstword == 0
::maxdepthspec == 0
::silent == 0
::max_depth == 32
::vowelcheck == 1
::lindx1 == null
::lindx2 == null
::findx1 has only one value
::findx1[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx1[] elements == 0
::findx2 has only one value
::findx2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx2[] elements == 0
s one of { "Daikon Dynamic Invariant Detector\n", "words.txt" }
::findx1[] elements == ::ncount
::ncount in ::findx1[]
::findx2[] elements == ::ncount
::ncount in ::findx2[]
::findx1[] elements == ::longestlength
::longestlength in ::findx1[]
::findx2[] elements == ::longestlength
::longestlength in ::findx2[]
::findx1[] elements == ::largestlet
::largestlet in ::findx1[]
::findx2[] elements == ::largestlet
::largestlet in ::findx2[]
::findx1[] elements == ::rec_anag_count
::rec_anag_count in ::findx1[]
::findx2[] elements == ::rec_anag_count
::rec_anag_count in ::findx2[]
::adjacentdups in ::findx1[]
::findx1[] elements == ::adjacentdups
::adjacentdups in ::findx2[]
::findx2[] elements == ::adjacentdups
::findx1[] elements == ::specfirstword
::specfirstword in ::findx1[]
::findx2[] elements == ::specfirstword
::specfirstword in ::findx2[]
::findx1[] elements == ::maxdepthspec
::maxdepthspec in ::findx1[]
::findx2[] elements == ::maxdepthspec
::maxdepthspec in ::findx2[]
::findx1[] elements == ::silent
::silent in ::findx1[]
::findx2[] elements == ::silent
::silent in ::findx2[]
===========================================================================
..uppercase():::EXIT
::words2 == orig(::words2)
::words2ptrs == orig(::words2ptrs)
::wordss == orig(::wordss)
::wordsn == orig(::wordsn)
::wordmasks == orig(::wordmasks)
::ncount == orig(::ncount)
::longestlength == orig(::longestlength)
::largestlet == orig(::largestlet)
::rec_anag_count == orig(::rec_anag_count)
::adjacentdups == orig(::adjacentdups)
::specfirstword == orig(::specfirstword)
::maxdepthspec == orig(::maxdepthspec)
::silent == orig(::silent)
::max_depth == orig(::max_depth)
::vowelcheck == orig(::vowelcheck)
::lindx1 == orig(::lindx1)
::lindx2 == orig(::lindx2)
::findx1 == orig(::findx1)
::findx1[] == orig(::findx1[])
::findx2 == orig(::findx2)
::findx2[] == orig(::findx2[])
::upcasestr one of { "DAIKON DYNAMIC INVARIANT DETECTOR\n", "WORDS.TXT" }
::words2 == null
::words2ptrs == null
::wordss == null
::wordsn == null
::wordmasks == null
::ncount == 0
::longestlength == 0
::largestlet == 0
::rec_anag_count == 0
::adjacentdups == 0
::specfirstword == 0
::maxdepthspec == 0
::silent == 0
::max_depth == 32
::vowelcheck == 1
::lindx1 == null
::lindx2 == null
::findx1 has only one value
::findx1[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx1[] elements == 0
::findx2 has only one value
::findx2[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::findx2[] elements == 0
::upcasestr == return
::findx1[] elements == ::ncount
::ncount in ::findx1[]
::findx2[] elements == ::ncount
::ncount in ::findx2[]
::findx1[] elements == ::longestlength
::longestlength in ::findx1[]
::findx2[] elements == ::longestlength
::longestlength in ::findx2[]
::findx1[] elements == ::largestlet
::largestlet in ::findx1[]
::findx2[] elements == ::largestlet
::largestlet in ::findx2[]
::findx1[] elements == ::rec_anag_count
::rec_anag_count in ::findx1[]
::findx2[] elements == ::rec_anag_count
::rec_anag_count in ::findx2[]
::adjacentdups in ::findx1[]
::findx1[] elements == ::adjacentdups
::adjacentdups in ::findx2[]
::findx2[] elements == ::adjacentdups
::findx1[] elements == ::specfirstword
::specfirstword in ::findx1[]
::findx2[] elements == ::specfirstword
::specfirstword in ::findx2[]
::findx1[] elements == ::maxdepthspec
::maxdepthspec in ::findx1[]
::findx2[] elements == ::maxdepthspec
::maxdepthspec in ::findx2[]
::findx1[] elements == ::silent
::silent in ::findx1[]
::findx2[] elements == ::silent
::silent in ::findx2[]
Exiting Daikon.
